package ie.gmit.sw.ai;

import java.util.Collections;
import java.util.LinkedList;

import ie.gmit.sw.ai.Traversers.AStarTraversator;
import ie.gmit.sw.ai.nn.Neural;

public class SpiderController {
	
	private static boolean isValidMove(Spider thread, int row, int col) {
		
		  if(thread.getPlayer().isGameOver()) return false;
	        if((row < 0) || (col < 0) || !(row <= thread.getMaze().length - 1 && col <= thread.getMaze()[row].length - 1)) return false;

	        switch(thread.getMaze()[row][col].getNodeType()){
	            case ' ':
	            	thread.getMaze()[thread.getRowPos()][thread.getColPos()].setNodeType(' '); // Paint the road where the spider was.
	            	thread.getMaze()[row][col].setNodeType('S');
	                if(thread.isAstar())
	                	thread.getMaze()[row][col].setNodeType('A');
	                thread.getMaze()[row][col].setEnemyID(thread.getMaze()[thread.getRowPos()][thread.getColPos()].getEnemyID());
	                thread.getMaze()[thread.getRowPos()][thread.getColPos()].setEnemyID(0);
	                return true;
	            case 'P': 
	            	if(thread.isAstar()) {
	            		
	            		return fight(thread, row,col);
	            	
	            	}else {
	            		
	            		return classify(thread, row, col);
	    		
	            	}
	                
	                
	        	case 'Q':
	                thread.getMaze()[thread.getRowPos()][thread.getColPos()].setNodeType(' ');
	                if(thread.isAstar())
	                	thread.getMaze()[row][col].setNodeType('A');
	                thread.getMaze()[row][col].setEnemyID(thread.getMaze()[thread.getRowPos()][thread.getColPos()].getEnemyID());
	                thread.getMaze()[thread.getRowPos()][thread.getColPos()].setEnemyID(0);
	                return true;
	            default:
	                return false;
	        }
		//return false;
	}
	
	
	
	
	 public static boolean fight(Spider thread, int row, int col) {
     	FuzzyFight fuzzyFight = new FuzzyFight();
         boolean enemyWon = fuzzyFight.startBattle(thread.getPlayer(), thread, "fcl/fuzzyFight.fcl");
         if(enemyWon == true){
             // The player has lost the game!
             thread.getMaze()[thread.getRowPos()][thread.getColPos()].setNodeType(' ');
             thread.getMaze()[thread.getRowPos()][thread.getColPos()].setEnemyID(0);
             thread.getPlayer().setGameOver(true);
             thread.getMaze()[row][col].setNodeType('L');
             
         }else{
             thread.getMaze()[thread.getRowPos()][thread.getColPos()].setNodeType('D');
             if(thread.isAstar())
                 thread.getMaze()[thread.getRowPos()][thread.getColPos()].setNodeType('D');
             thread.getMaze()[thread.getRowPos()][thread.getColPos()].setEnemyID(0);
             thread.setHealth(0);
             
         }
         return enemyWon;
	    }
	 
	 
	 
	 public static boolean classify(Spider thread, int row, int col) {
	    	
	    	
	    	System.out.println("Neural.");
 		
 		int outcome = 5; // Default it to run.
 		
 		try {
				 outcome = Neural.process(thread.getPlayer().getHealth(), thread.getPlayer().getWeaponStrength(),
						thread.getPlayer().getDefence());
			} catch (Exception e) {
				System.out.println("Error processing player data.");
				e.printStackTrace();
			}
 		
 		switch(outcome) {
 		case 1: // The spider freezes on the spot.
 			System.out.println("Panic!");
 			try {
					Thread.sleep(10000); // Freeze the thread from moving for 10 seconds.
					return false;
				} catch (InterruptedException e) {
					System.out.println("Thread error.");
					e.printStackTrace();
				}
 			break;
 		case 2: // Attack the player.
 			System.out.println("Fight!");
 			return fight(thread, row,col);
 		case 3: // Teleport away from the player.
 			System.out.println("Hide!");
 			hide();
 			return false;
 		case 4:
 			System.out.println("Run!");
 			return false;
 			default: // The default is to run away.
 				System.out.println("Run.");
 				return false;
 		}
	    	return false;
	    }
	 
	 private static void huntPlayer(Spider thread) {
	       
			
	        if(thread.getPlayerRowT() != thread.getPlayer().getRowPos() || thread.getPlayerColT() != thread.getPlayer().getColPos()){ // If the player has moved.
	          
	            thread.setNodeListPath(new LinkedList<Node>());
	            thread.setPlayerRowT(thread.getPlayer().getRowPos()); // The players current row.
	            thread.setPlayerColT(thread.getPlayer().getColPos()); // The players current col.
	            thread.setTraverse(new AStarTraversator(thread.getMaze()[thread.getPlayer().getRowPos()][thread.getPlayer().getColPos()], false, true));// Here
	            thread.getTraverse().traverse(thread.getMaze(), thread.getMaze()[thread.getRowPos()][thread.getColPos()]); // Current maze, current node.
	     
	            if(thread.getTraverse().isFoundGoal()){
	            	
	                thread.setPathGoal(thread.getTraverse().getPathGoal());
	                while (thread.getPathGoal() != null){
	                    thread.getNodeListPath().add(thread.getPathGoal());
	                    thread.setPathGoal(thread.getPathGoal().getParent());
	                }
	                // Revering the collection of paths to the player location & remove enemy node from list
	                Collections.reverse(thread.getNodeListPath());
	                thread.getNodeListPath().removeFirst(); // Remove itself from the list.
	            }
	        }

	        // If the path has been found then start moving the enemy towards the player
	        if(thread.getTraverse().isFoundGoal()){

	            Node nextPath = thread.getNodeListPath().poll();
	            boolean foundNextPath = false;
	            
	            makeMove(nextPath, foundNextPath); 
	        }
	    } // End hunt player.
	 
	 
	 
	 
	 public static  void randomWalk(Spider thread, int direction){
	        if(thread.getHealth() <= 0) return;
	        // Moving the enemy object to a new position in the maze
	        switch(direction){
	            // Going up in the maze
	            case 0:
	                if (isValidMove(thread, thread.getRowPos() - 1, thread.getColPos())){
	                    thread.setRowPos(thread.getRowPos() - 1);
	                }
	                break;
	            // Going down in the maze
	            case 1:
	                if (isValidMove(thread, thread.getRowPos() + 1, thread.getColPos())){
	                    thread.setRowPos(thread.getRowPos() + 1);
	                }
	                break;
	            // Going left in the maze
	            case 2:
	                if (isValidMove(thread, thread.getRowPos(), thread.getColPos() - 1)){
	                    thread.setColPos(thread.getColPos() - 1);
	                }
	                break;
	            // Going right in the maze
	            case 3:
	                if (isValidMove(thread, thread.getRowPos(), thread.getColPos() + 1)){
	                    thread.setColPos(thread.getColPos() + 1);
	                }
	                break;
	            default:
	                if (isValidMove(thread, thread.getRowPos() + 1, thread.getColPos())){
	                    thread.setRowPos(thread.getRowPos() + 1);
	                }
	                break;
	        }
	    }
	 
	 
	 
	 
	 
	 
	 

}
