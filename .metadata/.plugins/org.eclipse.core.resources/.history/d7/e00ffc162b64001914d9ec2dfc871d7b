package ie.gmit.sw.ai.gui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Scanner;

import javax.swing.JFrame;

import ie.gmit.sw.ai.GameSetup;
import ie.gmit.sw.ai.Maze;
import ie.gmit.sw.ai.Node;
import ie.gmit.sw.ai.controllers.PlayerController;
import ie.gmit.sw.ai.nn.Neural;
import ie.gmit.sw.ai.observables.KeyPressed;
import ie.gmit.sw.ai.observers.PlayerObserver;
import ie.gmit.sw.ai.sprites.ControlledSprite;
import ie.gmit.sw.ai.sprites.Spider;
import ie.gmit.sw.ai.sprites.Sprite;

public class GameRunner {
	
	/*
	 * Instance variables used by this class.
	 */
	public static final int MAZE_DIMENSION = 100;
	public static final int IMAGE_COUNT = 20;
	private ControlledSprite player;
	private JFrame gameFrame;
	private GameView gamePanel;
	private GameSetup setup;
	private Sprite[] sprites;
	private boolean isGold;

	
	
	public GameRunner() throws Exception {
		/*
		 * Launch the initial game menu.
		 */
		gameMenu();
		/*
		 * Create the game frame.
		 */
		newFrame();
		/*
		 * Initialise 
		 */
		initNewGame();
		/*
		 * Paint the frame.
		 */
		gameFrame.repaint();

	}

	/*
	 * Simple console menu that asks the user what exit search algorithm they wish tp use,
	 * as well as what they wish their goal to be.
	 */
	public void gameMenu() {
		Scanner console = new Scanner(System.in);
		int exitStrategy = 0;
		int goal;
		isGold = true;
		System.out.println("Enter Your Exit Strategy: ");
		System.out.println("---------------------------");
		System.out.println("Press 1 --> A Star Algorithm.");
		System.out.println("Press 2 --> Beam Search Algorithm.");
		System.out.println("Press 3 --> Best First Search  Algorithm.");
		System.out.println("Press 4 --> Iterative Deepening A Star Algorithm.");
		System.out.println("Press 5 ---> Basic Hill Climbing Algorithm.");
		exitStrategy = console.nextInt();
		System.out.println("Choose Your Goal:");
		System.out.println("---------------------------");
		System.out.println("Press 1 --> Gold.");
		System.out.println("Press 2 --> Jameson.");
		goal = console.nextInt();
		console.close();

		if (exitStrategy < 1 || exitStrategy > 5) {
			exitStrategy = 0;
		} else {
			PlayerController.setExitAlgorithm(exitStrategy - 1);
		}

		if (goal == 2) {
			isGold = false;
		} else {
			isGold = true;
		}

	}

	/*
	 * Create the main game frame.
	 */
	private void newFrame() {
		gameFrame = new JFrame("GMIT - B.Sc. in Computing (Software Development) - Gary Connelly");
		gameFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		/*
		 * Add the key listener instance.
		 */
		gameFrame.addKeyListener(KeyPressed.getInstance());
		gameFrame.getContentPane().setLayout(null);
		gameFrame.getContentPane().setBackground(Color.black);
		gameFrame.setSize(800, 800);
		gameFrame.setLocation(0, 0);
		gameFrame.setVisible(true);
	}

	/*
	 * Initialize the new game.
	 */
	public void initNewGame() {
		/*
		if (setup != null)
			setup.killEnemyThreads();
*/
		if (gamePanel != null)
			gameFrame.getContentPane().remove(gamePanel);

		setup = new GameSetup();

		newGame();

		gameFrame.repaint();

	}

	private void newGame() {

		Maze model = new Maze(MAZE_DIMENSION);
		Node[][] maze = model.getMaze(); // The already build maze.
		try {
			this.player = new ControlledSprite(100, 100, "The Player", 3, "resources/images/player/d1.png",
					"resources/images/player/d2.png", "resources/images/player/d3.png",
					"resources/images/player/l1.png", "resources/images/player/l2.png",
					"resources/images/player/l3.png", "resources/images/player/r1.png",
					"resources/images/player/r2.png", "resources/images/player/r3.png");
		} catch (Exception e1) {
			e1.printStackTrace();
		}
		ArrayList<Spider> spiders = new ArrayList<Spider>();
		Dimension d = new Dimension(800, 800);
		setup.setModel(model);
		setup.setMaze(maze);
		setup.setPlayer(player);
		setup.setEnemies(spiders);
		setup.placePlayer(model.getGoalPos());
		setup.placeEnemies();
		setup.setGold(isGold);

		try {
			sprites = setup.getSprites();
		} catch (Exception e) {
			System.out.println("Error reading images.");
			e.printStackTrace();
		}
		gamePanel = new GameView(setup, sprites); // Pass sprites in here.
		gamePanel.setSize(800, 800);
		gamePanel.setLocation(0, 0);
		gamePanel.setPreferredSize(d);
		gamePanel.setMinimumSize(d);
		gamePanel.setMaximumSize(d);
		gameFrame.getContentPane().add(gamePanel);

		updateView();

		new PlayerObserver(gamePanel, setup, setup.getPlayer());
	}

	private void updateView() {
		gamePanel.setCurrentRow(setup.getPlayer().getRowPos());
		gamePanel.setCurrentCol(setup.getPlayer().getColPos());
	}

	public void keyReleased(KeyEvent e) {
	} // Ignore

	public void keyTyped(KeyEvent e) {
	} // Ignore

	public static void main(String[] args) throws Exception {

		Neural.trainNetwork();
		new GameRunner();
	}
}
