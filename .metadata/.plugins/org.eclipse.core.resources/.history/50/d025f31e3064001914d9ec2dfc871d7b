package ie.gmit.sw.ai.controllers;

import ie.gmit.sw.ai.GameSetup;
import ie.gmit.sw.ai.Node;
import ie.gmit.sw.ai.Traversers.AStarTraversator;
import ie.gmit.sw.ai.Traversers.BasicHillClimbingTraversator;
import ie.gmit.sw.ai.Traversers.BeamTraversator;
import ie.gmit.sw.ai.Traversers.BestFirstTraversator;
import ie.gmit.sw.ai.Traversers.IDAStarTraversator;
import ie.gmit.sw.ai.Traversers.Traversator;
import ie.gmit.sw.ai.fuzzy.FuzzyFight;

public class PlayerController {
	
	/*
	 * Controls the player sprite's behaviour.
	 */

	public static int exitAlgorithm = 0; // Default the exit algorithm to A*.

	
	/*
	 * Checks if the move the player is about to make is valid.
	 */
	public static boolean isValidMove(GameSetup setup, int r, int c) {

		Node[][] maze;
		maze = setup.getMaze();
		if (!(r <= setup.getMaze().length - 1 && c <= setup.getMaze()[r].length - 1))
			return false;

		switch (maze[r][c].getNodeType()) {
		case ' ': // If it is a road node.

			maze[setup.getPlayer().getRowPos()][setup.getPlayer().getColPos()].setNodeType(' ');

			maze[setup.getPlayer().getRowPos()][setup.getPlayer().getColPos()].setGoalNode(false);
			maze[r][c].setNodeType('P');
			maze[r][c].setGoalNode(true);
			return true;
		case 'K': /* If it is a sword(Knife) node, update the players strength, output the player stats,
					and change the sword node to a hedge node.
		 		*/
			if (!(setup.getPlayer().getWeaponStrength() >= 45)) {
				setup.getPlayer().setWeaponStrength(45);
				System.out.println("--- Player Stats ---");
				System.out.println("Player Health: " + setup.getPlayer().getHealth());
				System.out.println("Player Strength: " + setup.getPlayer().getWeaponStrength());
				System.out.println("Player Defence: " + setup.getPlayer().getDefence());
				System.out.println("");
				setup.getMaze()[r][c].setNodeType('0');
			}
			return true;
		case '?': /* If it is a help node, set the boolean true so that the player can use the exit algorithm.
					Reset the help node to a hedge node.
		 		*/
			setup.getPlayer().setHelp(true);
			maze[r][c].setNodeType('0');
			return true;
		case 'B': /* If it is a bomb node, update the players strength and output the player stats.
					Reset the node to a hedge node.
		 		*/

			if (!(setup.getPlayer().getWeaponStrength() >= 75)) {
				setup.getPlayer().setWeaponStrength(75);
				System.out.println("--- Player Stats ---");
				System.out.println("Player Health: " + setup.getPlayer().getHealth());
				System.out.println("Player Strength: " + setup.getPlayer().getWeaponStrength());
				System.out.println("Player Defence: " + setup.getPlayer().getDefence());
				System.out.println("-------------------");
				maze[r][c].setNodeType('0');

			}
			return true;
		case 'H': /* If it is a hydrogen bomb node, update the players strength and output the player stats.
					Reset the node to a hedge node.
		 		*/
			if (!(setup.getPlayer().getWeaponStrength() >= 100)) {
				setup.getPlayer().setWeaponStrength(100);
				System.out.println("--- Player Stats ---");
				System.out.println("Player Health: " + setup.getPlayer().getHealth());
				System.out.println("Player Strength: " + setup.getPlayer().getWeaponStrength());
				System.out.println("Player Defence: " + setup.getPlayer().getDefence());
				System.out.println("-------------------");
				maze[r][c].setNodeType('0');

			}
			return true;
		case 'F': /* If it is a food node, update the players health and output the players stats. 
					Reset the node to a hedge node.
		          */
			if (setup.getPlayer().getHealth() < 100) {
				setup.getPlayer().setHealth(setup.getPlayer().getHealth() + 50);
				if (setup.getPlayer().getHealth() > 100)
					setup.getPlayer().setHealth(100);
				maze[r][c].setNodeType('0');
				System.out.println("--- Player Stats ---");
				System.out.println("Player Health: " + setup.getPlayer().getHealth());
				System.out.println("Player Strength: " + setup.getPlayer().getWeaponStrength());
				System.out.println("Player Defence: " + setup.getPlayer().getDefence());
				System.out.println("-------------------");

			}
			return true;
		case 'M': /* If it is a metal shield node, update the players defence and output the players stats.
		             Reset the node to a hedge node.
		          */
			if (setup.getPlayer().getDefence() < 100) {
				setup.getPlayer().setDefence(setup.getPlayer().getDefence() + 25);
				if (setup.getPlayer().getDefence() > 100)
					setup.getPlayer().setDefence(100);
				maze[r][c].setNodeType('0');
				System.out.println("--- Player Stats ---");
				System.out.println("Player Health: " + setup.getPlayer().getHealth());
				System.out.println("Player Strength: " + setup.getPlayer().getWeaponStrength());
				System.out.println("Player Defence: " + setup.getPlayer().getDefence());
				System.out.println("-------------------");

			}
			return true;
		case 'Q': /* If it is a a quickest path node, allow the player to walk into it, reset the players
					 original node to a road node and update the current node to a player node.
		          */
			maze[setup.getPlayer().getRowPos()][setup.getPlayer().getColPos()].setNodeType(' ');
			maze[setup.getPlayer().getRowPos()][setup.getPlayer().getColPos()].setGoalNode(false);
			maze[r][c].setNodeType('P');
			maze[r][c].setGoalNode(true);
			return true;
		case 'G': /* If it is the goal node, update the players previous node to e road node and update
		 			 the players current node to a chest node.
				  */
			maze[setup.getPlayer().getRowPos()][setup.getPlayer().getColPos()].setNodeType(' ');
			maze[setup.getPlayer().getRowPos()][setup.getPlayer().getColPos()].setGoalNode(false);
			maze[r][c].setNodeType('C');
			setup.getPlayer().setGameOver(true);

			return true;

		case 'S': /* If it is a spider node, fight.
				  */

			return fight(maze, setup, r, c);

		case 'A':/* If it is an A* node, fight.
				 */

			return fight(maze, setup, r, c);

		default:
			return false;

		}
	}

	/*
	 * The method that encapsulates the fuzzy logic fight implementation.
	 */
	public static boolean fight(Node[][] maze, GameSetup setup, int r, int c) {
		FuzzyFight fuzzyBattle = new FuzzyFight();
		boolean enemyWon = fuzzyBattle.startBattle(setup.getPlayer(),
				setup.getEnemies().get(setup.getMaze()[r][c].getEnemyID()), "resources/fuzzy/fcl/fuzzyFight.fcl");
		if (enemyWon == true) {
			/*
			 * If the player has lost the game, set the players node to road, and set the current node to 
			 * the lose(RIP) node.
			 */
			maze[setup.getPlayer().getRowPos()][setup.getPlayer().getColPos()].setNodeType(' ');
			maze[setup.getPlayer().getRowPos()][setup.getPlayer().getColPos()].setEnemyID(0);
			setup.getPlayer().setGameOver(true);
			maze[r][c].setNodeType('L');

			return false;
		} else {
			/*
			 * If the player won the fight, set the spiders node to a dead spider node.(Blue spider.)
			 */
			setup.getEnemies().get(setup.getMaze()[r][c].getEnemyID()).setHealth(0);
			maze[r][c].setNodeType('D');
			maze[r][c].setEnemyID(0);

			return false;
		}

	}

	public static Traversator algorithm(GameSetup setup) {
		/*
		 * Selects and exit algorithm base on whatever the user chose at the beginning of the application.
		 */
		switch (exitAlgorithm) {
		case 0:
			return new AStarTraversator(setup.getModel().getGoalNode(), false);
		case 1:
			return new BeamTraversator(setup.getModel().getGoalNode(), 10);
		case 2:
			return new BestFirstTraversator(setup.getModel().getGoalNode());
		case 3:
			return new IDAStarTraversator(setup.getModel().getGoalNode());
		case 4:
			return new BasicHillClimbingTraversator(setup.getModel().getGoalNode());
		default:
			return new AStarTraversator(setup.getModel().getGoalNode(), false);
		}
	}

	public static void setExitAlgorithm(int algorithm) {
		exitAlgorithm = algorithm;
	}

}
